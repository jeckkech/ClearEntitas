//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Entitas.CodeGeneration.Plugins.ComponentContextApiGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
public partial class GameContext {

    public GameEntity movableSpriteSettingsEntity { get { return GetGroup(GameMatcher.MovableSpriteSettings).GetSingleEntity(); } }
    public MovableSpriteSettingsComponent movableSpriteSettings { get { return movableSpriteSettingsEntity.movableSpriteSettings; } }
    public bool hasMovableSpriteSettings { get { return movableSpriteSettingsEntity != null; } }

    public GameEntity SetMovableSpriteSettings(MovableSpriteSettings newValue) {
        if (hasMovableSpriteSettings) {
            throw new Entitas.EntitasException("Could not set MovableSpriteSettings!\n" + this + " already has an entity with MovableSpriteSettingsComponent!",
                "You should check if the context already has a movableSpriteSettingsEntity before setting it or use context.ReplaceMovableSpriteSettings().");
        }
        var entity = CreateEntity();
        entity.AddMovableSpriteSettings(newValue);
        return entity;
    }

    public void ReplaceMovableSpriteSettings(MovableSpriteSettings newValue) {
        var entity = movableSpriteSettingsEntity;
        if (entity == null) {
            entity = SetMovableSpriteSettings(newValue);
        } else {
            entity.ReplaceMovableSpriteSettings(newValue);
        }
    }

    public void RemoveMovableSpriteSettings() {
        movableSpriteSettingsEntity.Destroy();
    }
}

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Entitas.CodeGeneration.Plugins.ComponentEntityApiGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
public partial class GameEntity {

    public MovableSpriteSettingsComponent movableSpriteSettings { get { return (MovableSpriteSettingsComponent)GetComponent(GameComponentsLookup.MovableSpriteSettings); } }
    public bool hasMovableSpriteSettings { get { return HasComponent(GameComponentsLookup.MovableSpriteSettings); } }

    public void AddMovableSpriteSettings(MovableSpriteSettings newValue) {
        var index = GameComponentsLookup.MovableSpriteSettings;
        var component = (MovableSpriteSettingsComponent)CreateComponent(index, typeof(MovableSpriteSettingsComponent));
        component.value = newValue;
        AddComponent(index, component);
    }

    public void ReplaceMovableSpriteSettings(MovableSpriteSettings newValue) {
        var index = GameComponentsLookup.MovableSpriteSettings;
        var component = (MovableSpriteSettingsComponent)CreateComponent(index, typeof(MovableSpriteSettingsComponent));
        component.value = newValue;
        ReplaceComponent(index, component);
    }

    public void RemoveMovableSpriteSettings() {
        RemoveComponent(GameComponentsLookup.MovableSpriteSettings);
    }
}

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Entitas.CodeGeneration.Plugins.ComponentMatcherApiGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
public sealed partial class GameMatcher {

    static Entitas.IMatcher<GameEntity> _matcherMovableSpriteSettings;

    public static Entitas.IMatcher<GameEntity> MovableSpriteSettings {
        get {
            if (_matcherMovableSpriteSettings == null) {
                var matcher = (Entitas.Matcher<GameEntity>)Entitas.Matcher<GameEntity>.AllOf(GameComponentsLookup.MovableSpriteSettings);
                matcher.componentNames = GameComponentsLookup.componentNames;
                _matcherMovableSpriteSettings = matcher;
            }

            return _matcherMovableSpriteSettings;
        }
    }
}
